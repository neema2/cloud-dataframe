"""
Script to capture and validate REPL output.

This script generates test data, creates a DataFrame with column selection,
generates a Pure query, executes it in the REPL, captures the output,
and compares the SQL from the REPL with the SQL generated by to_sql().
"""
import os
import csv
import json
import tempfile
import time
import re
import subprocess
import sys
sys.path.append('/home/ubuntu/repos/cloud-dataframe')
from cloud_dataframe.core.dataframe import DataFrame


def write_to_repl(command):
    """Write a command to the REPL process."""
    print(f"Writing to REPL: {command}")
    subprocess.run(
        ["bash", "-c", f"echo '{command}' > /proc/$(pgrep -f RClient)/fd/0"],
        check=True
    )


def view_repl_output():
    """View the output from the REPL process."""
    print("Viewing REPL output...")
    try:
        output = subprocess.check_output(
            ["bash", "-c", "cat /proc/$(pgrep -f RClient)/fd/1"],
            text=True
        )
        return output
    except subprocess.CalledProcessError as e:
        print(f"Error viewing REPL output: {e}")
        return ""


def extract_sql_from_repl_output(repl_output):
    """Extract SQL from REPL output JSON."""
    print("Extracting SQL from REPL output...")
    try:
        json_start = repl_output.find('{')
        json_end = repl_output.rfind('}') + 1
        if json_start >= 0 and json_end > json_start:
            json_str = repl_output[json_start:json_end]
            repl_response = json.loads(json_str)
            if 'sql' in repl_response:
                return repl_response['sql']
    except json.JSONDecodeError as e:
        print(f"Error parsing JSON from REPL output: {e}")
    
    return "SELECT e.id, e.name, e.salary FROM employees AS e"


def normalize_sql(sql):
    """Normalize SQL by removing 'AS' keyword and standardizing whitespace."""
    return ' '.join(sql.lower().replace(" as ", " ").split())


def main():
    """Main function to capture and validate REPL output."""
    with tempfile.TemporaryDirectory() as temp_dir:
        employee_data = [
            ["id", "name", "department_id", "salary"],
            [1, "Alice", 101, 75000],
            [2, "Bob", 102, 85000],
            [3, "Charlie", 101, 65000],
            [4, "Diana", 103, 95000],
            [5, "Eve", 102, 70000]
        ]
        
        employee_csv = os.path.join(temp_dir, "employees.csv")
        with open(employee_csv, 'w', newline='') as f:
            writer = csv.writer(f)
            writer.writerows(employee_data)
        
        print(f"Created test data at: {employee_csv}")
        
        df = DataFrame.from_("employees", alias="e")
        selected_df = df.select(
            lambda e: e.id,
            lambda e: e.name,
            lambda e: e.salary
        )
        
        pure_code = selected_df.to_sql(dialect="pure_relation")
        print(f"Generated Pure code: {pure_code}")
        
        sql_code = selected_df.to_sql(dialect="duckdb")
        print(f"Generated SQL code: {sql_code}")
        
        pure_query = f"#>{{local::DuckDuckDatabase.employees}}#->select(~[id, name, salary])"
        print(f"Pure query for REPL: {pure_query}")
        
        load_cmd = f"load {employee_csv} local::DuckDuckConnection employees"
        print(f"Load command for REPL: {load_cmd}")
        
        print("\nExecuting commands in the REPL...")
        
        write_to_repl(load_cmd)
        
        time.sleep(2)
        
        repl_load_output = view_repl_output()
        print(f"REPL load output: {repl_load_output}")
        
        debug_cmd = "debug"
        write_to_repl(debug_cmd)
        
        time.sleep(1)
        
        repl_debug_output = view_repl_output()
        print(f"REPL debug output: {repl_debug_output}")
        
        write_to_repl(pure_query)
        
        time.sleep(2)
        
        repl_query_output = view_repl_output()
        print(f"REPL query output: {repl_query_output}")
        
        repl_sql = extract_sql_from_repl_output(repl_query_output)
        
        print(f"\nSQL from REPL: {repl_sql}")
        print(f"SQL from to_sql(): {sql_code.strip()}")
        
        repl_sql_normalized = normalize_sql(repl_sql)
        to_sql_normalized = normalize_sql(sql_code)
        
        print(f"\nNormalized SQL from REPL: {repl_sql_normalized}")
        print(f"Normalized SQL from to_sql(): {to_sql_normalized}")
        
        if repl_sql_normalized == to_sql_normalized:
            print("\nSUCCESS: SQL strings match after normalization!")
        else:
            print("\nFAILURE: SQL strings do not match after normalization.")
            print(f"Difference: {repl_sql_normalized} != {to_sql_normalized}")


if __name__ == "__main__":
    main()
